local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESP_Enabled = false
local ESP_Color = Color3.fromRGB(0, 255, 0)
local ESP_Objects = {}

local NPC_ESP_Enabled = false
local NPC_ESP_Color = Color3.fromRGB(255, 0, 0)
local NPC_ESP_Objects = {}

local InstantHeal_Enabled = false
local InstantInteract_Enabled = false

local function SafeDestroy(instance)
    if instance and instance.Parent then
        pcall(function() instance:Destroy() end)
    end
end

local function ClearESP(obj)
    if obj then
        local data = ESP_Objects[obj]
        if data then
            SafeDestroy(data.Highlight)
            ESP_Objects[obj] = nil
        end
    else
        for objInstance, data in pairs(ESP_Objects) do
            SafeDestroy(data.Highlight)
        end
        ESP_Objects = {}
    end
end

local function ClearNPCESP(npc)
    if npc then
        local data = NPC_ESP_Objects[npc]
        if data then
            SafeDestroy(data.Highlight)
            NPC_ESP_Objects[npc] = nil
        end
    else
        for npcInstance, data in pairs(NPC_ESP_Objects) do
            SafeDestroy(data.Highlight)
        end
        NPC_ESP_Objects = {}
    end
end

local function CreateESP(obj)
    if not IsValid(obj) or not obj:IsA("Model") or ESP_Objects[obj] then return end

    local success, result = pcall(function()
        local primaryPart = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
        if not primaryPart then return nil end

        local highlight = Instance.new("Highlight")
        highlight.Name = "Rayfield_ESP_Highlight"
        highlight.Adornee = obj
        highlight.FillColor = ESP_Color
        highlight.FillTransparency = 0.5
        highlight.OutlineColor = ESP_Color
        highlight.OutlineTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Parent = obj

        return highlight
    end)

    if success and result then
        ESP_Objects[obj] = { Highlight = result }
    elseif not success then
        warn("[ESP Error] Failed to create highlight for", obj:GetFullName(), ":", result)
    end
end

local function CreateNPCESP(npc)
    if not IsValid(npc) or not npc:IsA("Model") or NPC_ESP_Objects[npc] or Players:GetPlayerFromCharacter(npc) then
        return
    end

    local humanoid = npc:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        return
    end

    if npc:FindFirstChild("Rayfield_NPC_ESP_Highlight") then
         return
    end

    local success, result = pcall(function()
        local highlight = Instance.new("Highlight")
        highlight.Name = "Rayfield_NPC_ESP_Highlight"
        highlight.Adornee = npc
        highlight.FillColor = NPC_ESP_Color
        highlight.FillTransparency = 0.5
        highlight.OutlineColor = NPC_ESP_Color
        highlight.OutlineTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Parent = npc

        return { Highlight = highlight, Humanoid = humanoid }
    end)

    if success and result then
        NPC_ESP_Objects[npc] = result
    elseif not success then
        warn("[NPC ESP Error] Failed to create highlight for", npc:GetFullName(), ":", result)
    end
end

local function UpdateColors()
    for obj, data in pairs(ESP_Objects) do
        if IsValid(data.Highlight) then
            pcall(function()
                data.Highlight.FillColor = ESP_Color
                data.Highlight.OutlineColor = ESP_Color
            end)
        else
             ESP_Objects[obj] = nil
        end
    end
end

local function UpdateNPCColors()
    for npc, data in pairs(NPC_ESP_Objects) do
        if IsValid(data.Highlight) then
             pcall(function()
                data.Highlight.FillColor = NPC_ESP_Color
                data.Highlight.OutlineColor = NPC_ESP_Color
             end)
        else
            NPC_ESP_Objects[npc] = nil
        end
    end
end

local function UpdateESP()
    ClearESP()
    if not ESP_Enabled then return end

    for _, obj in pairs(CollectionService:GetTagged("DraggableObject")) do
        CreateESP(obj)
    end
end

local function UpdateNPCESP()
    ClearNPCESP()
    if not NPC_ESP_Enabled then return end

    for _, potentialNPC in pairs(Workspace:GetChildren()) do
         if potentialNPC:IsA("Model") then
              CreateNPCESP(potentialNPC)
         end
    end
    --[[
     for _, descendant in pairs(Workspace:GetDescendants()) do
         if descendant:IsA("Model") then
             CreateNPCESP(descendant)
         end
     end
     --]]
end

local function instantHeal()
    local character = LocalPlayer.Character
    if not character then return false end

    local bandage = character:FindFirstChild("Bandage")
    if not bandage then return false end

    local useRemote = bandage:FindFirstChild("Use")
    if not useRemote or not useRemote:IsA("RemoteEvent") then return false end

    local success = pcall(function() useRemote:FireServer() end)
    if not success then warn("Failed to fire Bandage 'Use' remote.") end
    return success
end

local bandageRenderStepConnection = nil
local function patchBandageSystem()
    local success, bandageUI = pcall(function()
        return LocalPlayer.PlayerGui:WaitForChild("BandageUse", 5)
    end)

    if not success or not bandageUI then
        warn("Failed to find BandageUse GUI")
        return
    end

    local lineFrame = bandageUI:FindFirstChild("LineFrame", true)
    local fillBar = lineFrame and lineFrame:FindFirstChild("Fill")

    if not fillBar then
        warn("Failed to find Bandage Fill Bar")
    end

    if bandageRenderStepConnection then
        bandageRenderStepConnection:Disconnect()
        bandageRenderStepConnection = nil
    end

    bandageRenderStepConnection = RunService:BindToRenderStep("InstantBandage", Enum.RenderPriority.Camera.Value + 1, function()
        if InstantHeal_Enabled and bandageUI.Enabled then
            local uiVisible = bandageUI.Enabled

            if fillBar then
                 pcall(function() fillBar.Size = UDim2.new(1, 0, 1, 0) end)
            end

            local healed = instantHeal()

            if healed then
                 pcall(function() bandageUI.Enabled = false end)
            elseif uiVisible then

            end
        end
    end)
end

local function modifyProximityPrompt(prompt)
    if not prompt:IsA("ProximityPrompt") then return end

    local success = pcall(function()
        local originalDuration = prompt.HoldDuration
        if not prompt:GetAttribute("OriginalHoldDuration") then
            prompt:SetAttribute("OriginalHoldDuration", originalDuration)
        end

        if InstantInteract_Enabled then
            prompt.HoldDuration = 0.05
        end
    end)
    if not success then warn("Failed to modify prompt:", prompt:GetFullName()) end
end

local function restoreProximityPrompt(prompt)
    if not prompt:IsA("ProximityPrompt") then return end

     local success = pcall(function()
        local originalDuration = prompt:GetAttribute("OriginalHoldDuration")
        if originalDuration then
            prompt.HoldDuration = originalDuration

        end
    end)
    if not success then warn("Failed to restore prompt:", prompt:GetFullName()) end
end

local function updateAllProximityPrompts()
    for _, descendant in pairs(Workspace:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            if InstantInteract_Enabled then
                modifyProximityPrompt(descendant)
            else
                restoreProximityPrompt(descendant)
            end
        end
    end
end

RunService.RenderStepped:Connect(function()
    if ESP_Enabled then
        for obj, data in pairs(ESP_Objects) do
            if not IsValid(obj) or not obj:IsDescendantOf(Workspace) or not IsValid(data.Highlight) then
                ClearESP(obj)
            end
        end
    end

    if NPC_ESP_Enabled then
        for npc, data in pairs(NPC_ESP_Objects) do
            if not IsValid(npc) or not npc:IsDescendantOf(Workspace) or not IsValid(data.Highlight) or not IsValid(data.Humanoid) or data.Humanoid.Health <= 0 then
                ClearNPCESP(npc)
            end
        end
    end
end)

CollectionService:GetInstanceAddedSignal("DraggableObject"):Connect(function(obj)
    if ESP_Enabled then
        task.wait()
        CreateESP(obj)
    end
end)

CollectionService:GetInstanceRemovedSignal("DraggableObject"):Connect(function(obj)
    ClearESP(obj)
end)

Workspace.DescendantAdded:Connect(function(descendant)
    if NPC_ESP_Enabled and descendant:IsA("Model") then
        task.defer(CreateNPCESP, descendant)
    end

    if InstantInteract_Enabled and descendant:IsA("ProximityPrompt") then
        modifyProximityPrompt(descendant)
    end
end)

function IsValid(instance)
    return instance and instance.Parent ~= nil
end

local defaultFOV = math.clamp(Camera.FieldOfView, 70, 110)

local Window = Rayfield:CreateWindow({
    Name = "дед реилс нахуй",
    LoadingTitle = "Загрузка...",
    LoadingSubtitle = "by Максимка",
    Theme = "Default",
})

local WhatsNewTab = Window:CreateTab("Что нового?", "info")
WhatsNewTab:CreateParagraph({
    Title = "Список изменений",
    Content = "30.03.2025 04:23 | Добавил моментальное использование аптечки\n30.03.2025 04:35 | Добавил ESP для NPC\n30.03.2025 04:41 | Добавил быстрое взаимодействие\n30.03.2025 12:20 | FIX: Улучшена стабильность ESP для NPC и предметов"
})

local MainTab = Window:CreateTab("Главное", "home")

MainTab:CreateToggle({
    Name = "ESP для предметов",
    CurrentValue = ESP_Enabled,
    Flag = "ToggleESP",
    Callback = function(Value)
        ESP_Enabled = Value
        if Value then
            UpdateESP()
        else
            ClearESP()
        end
    end
})

MainTab:CreateToggle({
    Name = "ESP для NPC",
    CurrentValue = NPC_ESP_Enabled,
    Flag = "ToggleNPCESP",
    Callback = function(Value)
        NPC_ESP_Enabled = Value
        if Value then
            UpdateNPCESP()
        else
            ClearNPCESP()
        end
    end
})

MainTab:CreateToggle({
    Name = "Мгновенное использование аптечки",
    CurrentValue = InstantHeal_Enabled,
    Flag = "InstantHealToggle",
    Callback = function(Value)
        InstantHeal_Enabled = Value
    end
})

MainTab:CreateToggle({
    Name = "Быстрое взаимодействие",
    CurrentValue = InstantInteract_Enabled,
    Flag = "InstantInteractToggle",
    Callback = function(Value)
        InstantInteract_Enabled = Value
        updateAllProximityPrompts()
    end
})

MainTab:CreateColorPicker({
    Name = "Цвет обводки предметов",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "OutlineColorPicker",
    Callback = function(Color)
        local success = pcall(function()
            local highlight = ReplicatedStorage:FindFirstChild("Client", 1)
                and ReplicatedStorage.Client:FindFirstChild("Handlers", 1)
                and ReplicatedStorage.Client.Handlers:FindFirstChild("DraggableItemHandlers", 1)
                and ReplicatedStorage.Client.Handlers.DraggableItemHandlers:FindFirstChild("ClientDraggableObjectHandler", 1)
                and ReplicatedStorage.Client.Handlers.DraggableItemHandlers.ClientDraggableObjectHandler:FindFirstChild("DragHighlight")

            if highlight and highlight:IsA("Highlight") then
                highlight.OutlineColor = Color
            else
                warn("Game's DragHighlight not found.")
            end
        end)
        if not success then warn("Error accessing game's DragHighlight.") end
    end
})

MainTab:CreateSlider({
    Name = "Размер прицела",
    Range = {0.1, 0.7},
    Increment = 0.1,
    Suffix = "x",
    CurrentValue = 0.3,
    Flag = "CrosshairSizeSlider",
    Callback = function(Value)
        local success = pcall(function()
            local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
            local crosshairUI = playerGui and playerGui:FindFirstChild("Crosshair")
            local crosshair = crosshairUI and crosshairUI:FindFirstChild("Crosshair")

            if crosshair and (crosshair:IsA("ImageLabel") or crosshair:IsA("Frame")) then
                crosshair.Size = UDim2.new(0, Value * 20, 0, Value * 20)
            else

            end
        end)

    end
})

MainTab:CreateSlider({
    Name = "Угол обзора (FOV)",
    Range = {70, 110},
    Increment = 1,
    Suffix = "°",
    CurrentValue = defaultFOV,
    Flag = "FOVSlider",
    Callback = function(Value)
        Camera.FieldOfView = Value
    end
})

local SettingsTab = Window:CreateTab("Настройки", "settings")

SettingsTab:CreateColorPicker({
    Name = "Цвет подсветки ESP предметов",
    Color = ESP_Color,
    Flag = "ESPColor",
    Callback = function(Color)
        ESP_Color = Color
        UpdateColors()
    end
})

SettingsTab:CreateColorPicker({
    Name = "Цвет подсветки ESP NPC",
    Color = NPC_ESP_Color,
    Flag = "NPCESPColor",
    Callback = function(Color)
        NPC_ESP_Color = Color
        UpdateNPCColors()
    end
})

patchBandageSystem()
updateAllProximityPrompts()
