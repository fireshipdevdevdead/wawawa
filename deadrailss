local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local CollectionService = game:GetService("CollectionService")

local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local WeaponController = nil
pcall(function()
    WeaponController = require(ReplicatedStorage.Client.Controllers.WeaponController)
end)

local Settings = {
    instantHeal = false,
    instantInteract = false,
    noFog = false,
    fullBright = false,
    noSpread = false,
    autoReload = false,
    instantReload = false
}

local Connections = {}
local LightingBackup = {
    stored = {
        fog = false,
        brightness = false,
        atmosphere = false
    }
}

local originalNamecall = nil

local function isValid(instance)
    return instance and instance.Parent ~= nil
end

local bandageRenderStepConnection = nil

local function instantHeal()
    local character = LocalPlayer.Character
    if not character then return false end
    
    local bandage = character:FindFirstChild("Bandage")
    if not bandage then return false end
    
    local useRemote = bandage:FindFirstChild("Use")
    if not useRemote or not useRemote:IsA("RemoteEvent") then return false end
    
    local success = pcall(function() useRemote:FireServer() end)
    return success
end

local function setupBandageSystem()
    if bandageRenderStepConnection then 
        bandageRenderStepConnection:Disconnect()
        bandageRenderStepConnection = nil
    end
    
    local success, bandageUI = pcall(function() 
        return LocalPlayer.PlayerGui:WaitForChild("BandageUse", 5) 
    end)
    
    if not success or not bandageUI then return end
    
    local lineFrame = bandageUI:FindFirstChild("LineFrame", true)
    local fillBar = lineFrame and lineFrame:FindFirstChild("Fill")
    
    bandageRenderStepConnection = RunService:BindToRenderStep("InstantBandage", Enum.RenderPriority.Camera.Value + 1, function()
        if Settings.instantHeal and bandageUI.Enabled then
            if fillBar then pcall(function() fillBar.Size = UDim2.new(1, 0, 1, 0) end) end
            local healed = instantHeal()
            if healed then pcall(function() bandageUI.Enabled = false end) end
        end
    end)
end

local function modifyProximityPrompt(prompt)
    if not prompt:IsA("ProximityPrompt") then return end
    
    local success = pcall(function()
        local originalDuration = prompt.HoldDuration
        if not prompt:GetAttribute("OriginalHoldDuration") then
            prompt:SetAttribute("OriginalHoldDuration", originalDuration)
        end
        if Settings.instantInteract then prompt.HoldDuration = 0.05 end
    end)
end

local function restoreProximityPrompt(prompt)
    if not prompt:IsA("ProximityPrompt") then return end
    
    local success = pcall(function()
        local originalDuration = prompt:GetAttribute("OriginalHoldDuration")
        if originalDuration then prompt.HoldDuration = originalDuration end
    end)
end

local function updateAllProximityPrompts()
    for _, descendant in pairs(Workspace:GetDescendants()) do
        if descendant:IsA("ProximityPrompt") then
            if Settings.instantInteract then 
                modifyProximityPrompt(descendant) 
            else 
                restoreProximityPrompt(descendant) 
            end
        end
    end
end

local function storeOriginalLighting(type)
    if type == "Fog" and not LightingBackup.stored.fog then
        pcall(function() LightingBackup.fogStart = Lighting.FogStart end)
        pcall(function() LightingBackup.fogEnd = Lighting.FogEnd end)
        pcall(function() LightingBackup.fogColor = Lighting.FogColor end)
        LightingBackup.stored.fog = true
    elseif type == "Brightness" and not LightingBackup.stored.brightness then
        pcall(function() LightingBackup.ambient = Lighting.Ambient end)
        pcall(function() LightingBackup.outdoorAmbient = Lighting.OutdoorAmbient end)
        pcall(function() LightingBackup.brightness = Lighting.Brightness end)
        pcall(function() LightingBackup.colorShiftTop = Lighting.ColorShift_Top end)
        pcall(function() LightingBackup.colorShiftBottom = Lighting.ColorShift_Bottom end)
        LightingBackup.stored.brightness = true
    elseif type == "Atmosphere" and not LightingBackup.stored.atmosphere then
        local atmosphere = Lighting:FindFirstChildOfClass("Atmosphere")
        if atmosphere then
            LightingBackup.atmosphere = atmosphere
            pcall(function() LightingBackup.atmosphereDensity = atmosphere.Density end)
            pcall(function() LightingBackup.atmosphereOffset = atmosphere.Offset end)
            pcall(function() LightingBackup.atmosphereHaze = atmosphere.Haze end)
            pcall(function() LightingBackup.atmosphereColor = atmosphere.Color end)
            LightingBackup.stored.atmosphere = true
        end
    end
end

local function applyNoFog()
    pcall(function() Lighting.FogStart = 1000000 end)
    pcall(function() Lighting.FogEnd = 2000000 end)
    
    local atmosphere = Lighting:FindFirstChildOfClass("Atmosphere")
    if atmosphere then
        pcall(function() atmosphere.Density = 0 end)
        pcall(function() atmosphere.Offset = 0 end)
        pcall(function() atmosphere.Haze = 0 end)
    end
end

local function restoreNoFog()
    if LightingBackup.stored.fog then
        pcall(function() Lighting.FogStart = LightingBackup.fogStart end)
        pcall(function() Lighting.FogEnd = LightingBackup.fogEnd end)
        pcall(function() Lighting.FogColor = LightingBackup.fogColor end)
    end
    
    if LightingBackup.stored.atmosphere and isValid(LightingBackup.atmosphere) then
        local atmosphere = LightingBackup.atmosphere
        pcall(function() atmosphere.Density = LightingBackup.atmosphereDensity end)
        pcall(function() atmosphere.Offset = LightingBackup.atmosphereOffset end)
        pcall(function() atmosphere.Haze = LightingBackup.atmosphereHaze end)
        pcall(function() atmosphere.Color = LightingBackup.atmosphereColor end)
    end
end

local function applyFullBright()
    pcall(function() Lighting.Ambient = Color3.fromRGB(180, 180, 180) end)
    pcall(function() Lighting.OutdoorAmbient = Color3.fromRGB(180, 180, 180) end)
    pcall(function() Lighting.Brightness = 2 end)
    pcall(function() Lighting.ColorShift_Top = Color3.fromRGB(0, 0, 0) end)
    pcall(function() Lighting.ColorShift_Bottom = Color3.fromRGB(0, 0, 0) end)
    
    local sky = Lighting:FindFirstChildOfClass("Sky") or Camera:FindFirstChildOfClass("Sky")
    if sky then pcall(function() sky.Brightness = 2 end) end
end

local function restoreFullBright()
    if LightingBackup.stored.brightness then
        pcall(function() Lighting.Ambient = LightingBackup.ambient end)
        pcall(function() Lighting.OutdoorAmbient = LightingBackup.outdoorAmbient end)
        pcall(function() Lighting.Brightness = LightingBackup.brightness end)
        pcall(function() Lighting.ColorShift_Top = LightingBackup.colorShiftTop end)
        pcall(function() Lighting.ColorShift_Bottom = LightingBackup.colorShiftBottom end)
    end
end

local function setupNoSpread()
    if originalNamecall then return end
    
    originalNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        if Settings.noSpread and method == "FireServer" and self.Name == "Shoot" and typeof(args[3]) == "CFrame" then
            args[3] = Camera.CFrame
        end
        
        return originalNamecall(self, unpack(args))
    end)
end

local function instantReload(weapon)
    if not weapon or not WeaponController then return end
    
    pcall(function()
        if weapon:FindFirstChild("ClientWeaponState") and weapon:FindFirstChild("WeaponConfiguration") then
            local currentAmmo = weapon.ClientWeaponState:FindFirstChild("CurrentAmmo")
            local isReloading = weapon.ClientWeaponState:FindFirstChild("IsReloading")
            local magazineSize = weapon.WeaponConfiguration:FindFirstChild("MagazineSize")
            
            if currentAmmo and magazineSize then
                WeaponController.ReloadGun(weapon)
                
                task.delay(0.1, function()
                    if isReloading then isReloading.Value = false end
                    if currentAmmo then currentAmmo.Value = magazineSize.Value end
                end)
            end
        end
    end)
end

local function checkAndReloadWeapons()
    if not Settings.autoReload or not WeaponController then return end
    
    for _, weapon in pairs(CollectionService:GetTagged("Weapon")) do
        if weapon:FindFirstChild("ClientWeaponState") and weapon:FindFirstChild("WeaponConfiguration") then
            local currentAmmo = weapon.ClientWeaponState:FindFirstChild("CurrentAmmo")
            local isReloading = weapon.ClientWeaponState:FindFirstChild("IsReloading")
            local magazineSize = weapon.WeaponConfiguration:FindFirstChild("MagazineSize")
            
            if currentAmmo and isReloading and magazineSize and 
               currentAmmo.Value < magazineSize.Value and 
               not isReloading.Value then
                pcall(function()
                    WeaponController.ReloadGun(weapon)
                end)
            end
        end
    end
end

Connections.renderStepped = RunService.RenderStepped:Connect(function()
    if Settings.noFog then applyNoFog() end
    if Settings.fullBright then applyFullBright() end
end)

Connections.autoReloadHeartbeat = RunService.Heartbeat:Connect(checkAndReloadWeapons)

Connections.descendantAdded = Workspace.DescendantAdded:Connect(function(descendant)
    if Settings.instantInteract and descendant:IsA("ProximityPrompt") then 
        modifyProximityPrompt(descendant)
    end
    
    if descendant:IsA("Atmosphere") and not LightingBackup.stored.atmosphere then
        storeOriginalLighting("Atmosphere")
        if Settings.noFog then applyNoFog() end
    end
end)

local defaultFOV = math.clamp(Camera.FieldOfView, 70, 110)

local Window = Rayfield:CreateWindow({
    Name = "дед реилс нахуй",
    LoadingTitle = "Загрузка...",
    LoadingSubtitle = "by Максимка",
    Theme = "Default",
})

local WhatsNewTab = Window:CreateTab("Что нового?", 4483362458)
WhatsNewTab:CreateParagraph({
    Title = "Список изменений",
    Content = "30.03.2025 04:23 | Добавил моментальное использование аптечки\n30.03.2025 04:35 | Добавил быстрое взаимодействие\n30.03.2025 12:20 | FIX: Улучшена стабильность\n30.03.2025 15:02 | Добавлена функция удаление тумана и полная яркость для ночи\n30.03.2025 21:20 | Добавлены функции Нулевой разброс и Авто-перезарядка\n30.03.2025 21:53 | Добавлена ЭКСПЕРИМЕНТАЛЬНАЯ функция мгновенной перезарядки"
})

local MainTab = Window:CreateTab("Главное", 4483345998)

MainTab:CreateToggle({ 
    Name = "Мгновенное использование аптечки", 
    CurrentValue = Settings.instantHeal, 
    Flag = "InstantHealToggle", 
    Callback = function(Value) Settings.instantHeal = Value end 
})

MainTab:CreateToggle({ 
    Name = "Быстрое взаимодействие", 
    CurrentValue = Settings.instantInteract, 
    Flag = "InstantInteractToggle", 
    Callback = function(Value) 
        Settings.instantInteract = Value
        updateAllProximityPrompts() 
    end 
})

MainTab:CreateToggle({
    Name = "Убрать туман",
    CurrentValue = Settings.noFog,
    Flag = "NoFogToggle",
    Callback = function(Value)
        Settings.noFog = Value
        if Value then
            storeOriginalLighting("Fog")
            storeOriginalLighting("Atmosphere")
            applyNoFog()
        else
            restoreNoFog()
        end
    end
})

MainTab:CreateToggle({
    Name = "Полная яркость",
    CurrentValue = Settings.fullBright,
    Flag = "FullBrightToggle",
    Callback = function(Value)
        Settings.fullBright = Value
        if Value then
            storeOriginalLighting("Brightness")
            applyFullBright()
        else
            restoreFullBright()
        end
    end
})

MainTab:CreateSlider({
    Name = "Размер прицела",
    Range = {0.1, 0.7}, 
    Increment = 0.1, 
    Suffix = "x", 
    CurrentValue = 0.3, 
    Flag = "CrosshairSizeSlider",
    Callback = function(Value)
        pcall(function()
            local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
            local crosshairUI = playerGui and playerGui:FindFirstChild("Crosshair")
            local crosshair = crosshairUI and crosshairUI:FindFirstChild("Crosshair")
            if crosshair and (crosshair:IsA("ImageLabel") or crosshair:IsA("Frame")) then
                crosshair.Size = UDim2.new(0, Value * 20, 0, Value * 20)
            end
        end)
    end
})

MainTab:CreateSlider({
    Name = "Угол обзора",
    Range = {70, 110}, 
    Increment = 1, 
    Suffix = "°", 
    CurrentValue = defaultFOV, 
    Flag = "FOVSlider",
    Callback = function(Value) Camera.FieldOfView = Value end
})

-- нашел иконку в старых ресурсах, надеюсь пойдет
local WeaponTab = Window:CreateTab("Оружие", 3517754538)

WeaponTab:CreateToggle({
    Name = "Нулевой разброс",
    CurrentValue = Settings.noSpread,
    Flag = "NoSpreadToggle",
    Callback = function(Value)
        Settings.noSpread = Value
        if Value then
            setupNoSpread()
        end
    end
})

WeaponTab:CreateToggle({
    Name = "Авто-перезарядка (после каждого выстрела)",
    CurrentValue = Settings.autoReload,
    Flag = "AutoReloadToggle",
    Callback = function(Value)
        Settings.autoReload = Value
    end
})

WeaponTab:CreateToggle({
    Name = "Мгновенная перезарядка (рискованно)",
    CurrentValue = Settings.instantReload,
    Flag = "InstantReloadToggle",
    Callback = function(Value)
        Settings.instantReload = Value
        
        if Value then
            Connections.instantReloadCheck = RunService.Heartbeat:Connect(function()
                if LocalPlayer.Character then
                    for _, weapon in pairs(CollectionService:GetTagged("Weapon")) do
                        if weapon:IsDescendantOf(LocalPlayer.Character) and 
                           weapon:FindFirstChild("ClientWeaponState") then
                            local currentAmmo = weapon.ClientWeaponState:FindFirstChild("CurrentAmmo")
                            local isReloading = weapon.ClientWeaponState:FindFirstChild("IsReloading")
                            local magazineSize = weapon.WeaponConfiguration:FindFirstChild("MagazineSize")
                            
                            if currentAmmo and isReloading and magazineSize and 
                               currentAmmo.Value < magazineSize.Value and
                               isReloading.Value then
                                instantReload(weapon)
                            end
                        end
                    end
                end
            end)
        elseif Connections.instantReloadCheck then
            Connections.instantReloadCheck:Disconnect()
            Connections.instantReloadCheck = nil
        end
    end
})

setupBandageSystem()
updateAllProximityPrompts()
storeOriginalLighting("Fog")
storeOriginalLighting("Brightness")
storeOriginalLighting("Atmosphere")
